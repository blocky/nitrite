// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	x509 "crypto/x509"

	mock "github.com/stretchr/testify/mock"
)

// InternalCertProvider is an autogenerated mock type for the CertProvider type
type InternalCertProvider struct {
	mock.Mock
}

type InternalCertProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *InternalCertProvider) EXPECT() *InternalCertProvider_Expecter {
	return &InternalCertProvider_Expecter{mock: &_m.Mock}
}

// Roots provides a mock function with given fields:
func (_m *InternalCertProvider) Roots() (*x509.CertPool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Roots")
	}

	var r0 *x509.CertPool
	var r1 error
	if rf, ok := ret.Get(0).(func() (*x509.CertPool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *x509.CertPool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*x509.CertPool)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InternalCertProvider_Roots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Roots'
type InternalCertProvider_Roots_Call struct {
	*mock.Call
}

// Roots is a helper method to define mock.On call
func (_e *InternalCertProvider_Expecter) Roots() *InternalCertProvider_Roots_Call {
	return &InternalCertProvider_Roots_Call{Call: _e.mock.On("Roots")}
}

func (_c *InternalCertProvider_Roots_Call) Run(run func()) *InternalCertProvider_Roots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InternalCertProvider_Roots_Call) Return(_a0 *x509.CertPool, _a1 error) *InternalCertProvider_Roots_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InternalCertProvider_Roots_Call) RunAndReturn(run func() (*x509.CertPool, error)) *InternalCertProvider_Roots_Call {
	_c.Call.Return(run)
	return _c
}

// NewInternalCertProvider creates a new instance of InternalCertProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInternalCertProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *InternalCertProvider {
	mock := &InternalCertProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
